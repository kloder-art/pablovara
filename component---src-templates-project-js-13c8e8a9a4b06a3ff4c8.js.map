{"version":3,"sources":["webpack:///./src/components/Artwork/types/Image.jsx","webpack:///./src/components/Artwork/types/Gif.jsx","webpack:///./src/components/Artwork/types/Youtube.jsx","webpack:///./src/components/Artwork/Artwork.jsx","webpack:///./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","webpack:///./src/templates/project.js"],"names":["StyledImage","styled","div","StyledGif","StyledYoutube","typeMap","youtube","id","text","allowFullscreen","width","height","src","dangerouslySetInnerHTML","__html","image","childImageSharp","original","gif","publicURL","Artwork","type","rest","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","Cmp","StyledProjectPage","article","StyledLayout","StyledText","pageQuery","ProjectPage","data","markdownRemark","frontmatter","html","Layout","SEO","title","artwork","map","x","idx"],"mappings":"yMAIA,IAAMA,EAAcC,IAAOC,IAAV,yEAAGD,CAAH,2BCAXE,EAAYF,IAAOC,IAAV,iEAAGD,CAAH,MCATG,EAAgBH,IAAOC,IAAV,6EAAGD,CAAH,MCAbI,EAAU,CACdC,QDCqB,SAAC,GAAD,IAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAP,OACrB,kBAACJ,EAAD,KACE,4BACEK,iBAAiB,EACjBC,MAAO,IACPC,OAAQ,IACRC,IAAG,iCAAmCL,EAAnC,mGAEL,yBAAKM,wBAAyB,CAAEC,OAAQN,OCR1CO,MHImB,SAAC,GAAD,IAAGH,EAAH,EAAGA,IAAKJ,EAAR,EAAQA,KAAR,OACnB,kBAACR,EAAD,KACE,yBACEY,IAAKA,GAAOA,EAAII,gBAAkBJ,EAAII,gBAAgBC,SAASL,IAAM,OAEvE,yBAAKC,wBAAyB,CAAEC,OAAQN,OGR1CU,IFDiB,SAAC,GAAD,IAAGN,EAAH,EAAGA,IAAKJ,EAAR,EAAQA,KAAR,OACjB,kBAACL,EAAD,KACE,yBAAKS,IAAKA,GAAOA,EAAIO,UAAYP,EAAIO,UAAY,OACjD,yBAAKN,wBAAyB,CAAEC,OAAQN,QEM7BY,EALC,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,KAASC,ECVb,SAAuCC,EAAQC,GAC5D,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IAEIE,EAAKC,EAFLC,EAAS,GACTC,EAAaC,OAAOC,KAAKP,GAG7B,IAAKG,EAAI,EAAGA,EAAIE,EAAWG,OAAQL,IACjCD,EAAMG,EAAWF,GACbF,EAASQ,QAAQP,IAAQ,IAC7BE,EAAOF,GAAOF,EAAOE,IAGvB,OAAOE,EDF8B,aAC/BM,EAAM5B,EAAQgB,GACpB,OAAO,kBAACY,EAAQX,IEHZY,EAAoBjC,IAAOkC,QAAV,iFAAGlC,CAAH,MAEjBmC,EAAenC,IAAOC,IAAV,4EAAGD,CAAH,8HAaZoC,EAAapC,IAAOC,IAAV,0EAAGD,CAAH,+JA2DHqC,GAFEC,UAxCK,SAAC,GAAD,QAClBC,KACEC,eAAkBC,EAFF,EAEEA,YAAaC,EAFf,EAEeA,KAFf,OAKlB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,MAAOJ,EAAYI,QACxB,kBAACZ,EAAD,KACE,kBAACE,EAAD,KACE,kBAACC,EAAD,KACE,4BAAKK,EAAYI,OACjB,yBAAKjC,wBAAyB,CAAEC,OAAQ6B,MAEzCD,EAAYK,SACXL,EAAYK,QAAQC,KAAI,SAACC,EAAGC,GAAJ,OAAY,kBAAC,EAAD,iBAAaD,EAAb,CAAgBxB,IAAKyB,QAC3D,sCA2Bc","file":"component---src-templates-project-js-13c8e8a9a4b06a3ff4c8.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst StyledImage = styled.div`\n  img {\n    max-height: 80vh;\n  }\n`;\n\nexport const Image = ({ src, text }) => (\n  <StyledImage>\n    <img\n      src={src && src.childImageSharp ? src.childImageSharp.original.src : null}\n    />\n    <div dangerouslySetInnerHTML={{ __html: text }} />\n  </StyledImage>\n);\n\nImage.propTypes = {\n  src: PropTypes.object,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst StyledGif = styled.div``;\n\nexport const Gif = ({ src, text }) => (\n  <StyledGif>\n    <img src={src && src.publicURL ? src.publicURL : null} />\n    <div dangerouslySetInnerHTML={{ __html: text }} />\n  </StyledGif>\n);\n\nGif.propTypes = {\n  src: PropTypes.object,\n  text: PropTypes.string,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst StyledYoutube = styled.div``;\n\nexport const Youtube = ({ id, text }) => (\n  <StyledYoutube>\n    <iframe\n      allowFullscreen={true}\n      width={750}\n      height={500}\n      src={`https://www.youtube.com/embed/${id}?fs=1&amp;iv_load_policy=3&amp;showinfo=0&amp;rel=0&amp;cc_load_policy=0&amp;start=0&amp;end=0`}\n    />\n    <div dangerouslySetInnerHTML={{ __html: text }} />\n  </StyledYoutube>\n);\n\nYoutube.propTypes = {\n  id: PropTypes.string,\n  text: PropTypes.string\n};\n","import React from 'react';\n\nimport * as types from './types';\n\nconst typeMap = {\n  youtube: types.Youtube,\n  image: types.Image,\n  gif: types.Gif,\n};\n\nconst Artwork = ({ type, ...rest }) => {\n  const Cmp = typeMap[type];\n  return <Cmp {...rest} />;\n};\n\nexport default Artwork;\n","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql } from 'gatsby';\nimport styled from 'styled-components';\n\nimport Layout from '../components/Layout';\nimport SEO from '../components/SEO';\nimport Artwork from '../components/Artwork';\n\nconst StyledProjectPage = styled.article``;\n\nconst StyledLayout = styled.div`\n  display: grid;\n  grid-template-rows: 1fr;\n  grid-gap: 2rem;\n  grid-auto-flow: column;\n\n  @media (max-width: 600px) {\n    & {\n      grid-auto-flow: row;\n    }\n  }\n`;\n\nconst StyledText = styled.div`\n  white-space: normal;\n  width: 33vw;\n  height: 89vh;\n\n  overflow: hidden;\n  overflow-y: auto;\n\n  @media (max-width: 600px) {\n    & {\n      padding-bottom: 4rem;\n      min-width: inherit;\n      height: auto;\n    }\n  }\n`;\n\nconst ProjectPage = ({\n  data: {\n    markdownRemark: { frontmatter, html },\n  },\n}) => (\n  <Layout>\n    <SEO title={frontmatter.title} />\n    <StyledProjectPage>\n      <StyledLayout>\n        <StyledText>\n          <h2>{frontmatter.title}</h2>\n          <div dangerouslySetInnerHTML={{ __html: html }} />\n        </StyledText>\n        {frontmatter.artwork &&\n          frontmatter.artwork.map((x, idx) => <Artwork {...x} key={idx} />)}\n        <div>&nbsp;</div>\n      </StyledLayout>\n    </StyledProjectPage>\n  </Layout>\n);\n\nProjectPage.propTypes = {\n  data: PropTypes.shape({\n    markdownRemark: PropTypes.shape({\n      frontmatter: PropTypes.shape({\n        title: PropTypes.string,\n        artwork: PropTypes.arrayOf(\n          PropTypes.shape({\n            type: PropTypes.oneOf(['image', 'youtube', 'gif']),\n            text: PropTypes.string,\n            src: PropTypes.object,\n            id: PropTypes.string,\n          })\n        ),\n      }),\n      html: PropTypes.string,\n    }),\n  }),\n};\n\nexport default ProjectPage;\n\nexport const pageQuery = graphql`\n  query($slug: String) {\n    markdownRemark(\n      frontmatter: { slug: { eq: $slug } }\n      fileInfo: { sourceInstanceName: { eq: \"projects\" } }\n    ) {\n      frontmatter {\n        slug\n        title\n        artwork {\n          type\n          text\n          id\n          src {\n            publicURL\n            childImageSharp {\n              original {\n                src\n              }\n            }\n          }\n        }\n      }\n      html\n    }\n  }\n`;\n"],"sourceRoot":""}